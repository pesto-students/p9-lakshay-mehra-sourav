/**
 * Function 1 producing a promise
 * @returns {Promise}
 */
function doTask1() {
  return new Promise((resolve, reject) => {
    resolve("Task 1 completed");
  });
}

/**
 * Function 2 producing a promise
 * @returns {Promise}
 */
function doTask2() {
  return new Promise((resolve, reject) => {
    resolve("Task 2 completed");
  });
}

/**
 * Function 3 producing a promise
 * @returns {Promise}
 */
function doTask3() {
  return new Promise((resolve, reject) => {
    resolve("Task 3 completed");
  });
}

/**
 * Function to consume doTask1, doTask2 and doTask3
 * asynchronously
 */
async function asynchronousFunction() {
  console.log("async/await");
  let result1 = await doTask1();
  console.log(`\t${result1}`);

  let result2 = await doTask2();
  console.log(`\t${result2}`);

  let result3 = await doTask3();
  console.log(`\t${result3}`);
}

/**
 * Generator function to yield promise functions doTask1, doTask2 and doTask3
 * @yields {Promise}
 */
function* generatorFunction() {
  yield doTask1();
  yield doTask2();
  yield doTask3();
}

asynchronousFunction();

setTimeout(async () => {
  console.log("\n");
  console.log("Generator");
  let iterator = generatorFunction();

  // Iterating through the iterator generated by generatorFunction
  for (let res of iterator) {
    console.log(`\t ${await res}`);
  }
});
